// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: tester.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TesterClient is the client API for Tester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TesterClient interface {
	TestDirector(ctx context.Context, opts ...grpc.CallOption) (Tester_TestDirectorClient, error)
}

type testerClient struct {
	cc grpc.ClientConnInterface
}

func NewTesterClient(cc grpc.ClientConnInterface) TesterClient {
	return &testerClient{cc}
}

func (c *testerClient) TestDirector(ctx context.Context, opts ...grpc.CallOption) (Tester_TestDirectorClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tester_ServiceDesc.Streams[0], "/pb.Tester/TestDirector", opts...)
	if err != nil {
		return nil, err
	}
	x := &testerTestDirectorClient{stream}
	return x, nil
}

type Tester_TestDirectorClient interface {
	Send(*Director) error
	Recv() (*Operator, error)
	grpc.ClientStream
}

type testerTestDirectorClient struct {
	grpc.ClientStream
}

func (x *testerTestDirectorClient) Send(m *Director) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testerTestDirectorClient) Recv() (*Operator, error) {
	m := new(Operator)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TesterServer is the server API for Tester service.
// All implementations must embed UnimplementedTesterServer
// for forward compatibility
type TesterServer interface {
	TestDirector(Tester_TestDirectorServer) error
	mustEmbedUnimplementedTesterServer()
}

// UnimplementedTesterServer must be embedded to have forward compatible implementations.
type UnimplementedTesterServer struct {
}

func (UnimplementedTesterServer) TestDirector(Tester_TestDirectorServer) error {
	return status.Errorf(codes.Unimplemented, "method TestDirector not implemented")
}
func (UnimplementedTesterServer) mustEmbedUnimplementedTesterServer() {}

// UnsafeTesterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TesterServer will
// result in compilation errors.
type UnsafeTesterServer interface {
	mustEmbedUnimplementedTesterServer()
}

func RegisterTesterServer(s grpc.ServiceRegistrar, srv TesterServer) {
	s.RegisterService(&Tester_ServiceDesc, srv)
}

func _Tester_TestDirector_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TesterServer).TestDirector(&testerTestDirectorServer{stream})
}

type Tester_TestDirectorServer interface {
	Send(*Operator) error
	Recv() (*Director, error)
	grpc.ServerStream
}

type testerTestDirectorServer struct {
	grpc.ServerStream
}

func (x *testerTestDirectorServer) Send(m *Operator) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testerTestDirectorServer) Recv() (*Director, error) {
	m := new(Director)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Tester_ServiceDesc is the grpc.ServiceDesc for Tester service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tester_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Tester",
	HandlerType: (*TesterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestDirector",
			Handler:       _Tester_TestDirector_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tester.proto",
}
