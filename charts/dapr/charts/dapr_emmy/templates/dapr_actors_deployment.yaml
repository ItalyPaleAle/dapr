{{- if and (eq .Values.global.actors.enabled true) (eq .Values.global.actors.serviceName emmy) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dapr-actors
  namespace: {{ .Release.Namespace }}
  labels:
    app: dapr-actors
    {{- range $key, $value := .Values.global.k8sLabels }}
    {{ $key }}: {{ tpl $value $ }}
    {{- end }}
spec:
{{- if eq .Values.global.ha.enabled true }}
  replicas: {{ .Values.global.ha.replicaCount }}
{{- else }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      app: dapr-actors
  template:
    metadata:
      labels:
        app: dapr-actors
        {{- range $key, $value := .Values.global.k8sLabels }}
        {{ $key }}: {{ tpl $value $ }}
        {{- end }}
        {{- with .Values.global.labels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        dapr.io/control-plane: actors
{{- if eq .Values.global.prometheus.enabled true }}
        prometheus.io/scrape: "{{ .Values.global.prometheus.enabled }}"
        prometheus.io/port: "{{ .Values.global.prometheus.port }}"
        prometheus.io/path: "/"
{{- end }}
{{- if .Values.deploymentAnnotations }}
{{ toYaml .Values.deploymentAnnotations | indent 4}}
{{- end }}
    spec:
      containers:
      - name: dapr-actors
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
{{- if eq .Values.debug.enabled false }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
{{- else }}
          initialDelaySeconds: {{ .Values.debug.initialDelaySeconds }}
{{- end }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
{{- if eq .Values.debug.enabled false }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
{{- else }}
          initialDelaySeconds: {{ .Values.debug.initialDelaySeconds }}
{{- end }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
{{- if contains "/" .Values.image.name }}
        image: "{{ .Values.image.name }}"
{{- else }}
        image: "{{ .Values.global.registry }}/{{ .Values.image.name }}:{{ .Values.global.tag }}"
{{- end }}
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
{{- if eq .Values.global.daprControlPlaneOs "linux" }}
        securityContext:
          runAsNonRoot: {{ .Values.runAsNonRoot }}
  {{- if eq .Values.debug.enabled true }}
          capabilities:
            add: ["SYS_PTRACE"]
  {{- else }}
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
  {{- end }}
  {{- if .Values.global.seccompProfile }}
          seccompProfile:
            type: {{ .Values.global.seccompProfile }}
  {{- end }}
{{- end }}
        env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        ports:
          - containerPort: 51101
        {{- if eq .Values.global.prometheus.enabled true }}
          - name: metrics
            containerPort: {{ .Values.global.prometheus.port }}
            protocol: TCP
        {{- end }}
        {{- if eq .Values.debug.enabled true }}
          - name: debug
            containerPort: {{ .Values.debug.port }}
            protocol: TCP
        {{- end }}
        resources:
          {{- toYaml .Values.resources | indent 10 }}
        volumeMounts:
          - name: dapr-trust-bundle
            mountPath: /var/run/secrets/dapr.io/tls
            readOnly: true
          {{- if .Values.global.mtls.mountSentryVolume }}
          - name: dapr-identity-token
            mountPath: /var/run/secrets/dapr.io/sentrytoken
            readOnly: true
          {{- end }}
          {{- if .Values.store.optionsFile.secretName }}
          - name: actors-opts
            mountPath: /var/run/secrets/dapr.io/actors/options
            subPath: options
            readOnly: true
          {{- end }}
        {{- with .Values.global.extraVolumeMounts.actors }}
          {{- toYaml . | nindent 10 }}
        {{- end }}
        command:
          {{- if eq .Values.debug.enabled false }}
          - "/actors"
          {{- else }}
          - "/dlv"
          {{- end }}
        args:
          {{- if eq .Values.debug.enabled true }}
          - "--listen=:{{ .Values.debug.port }}"
          - "--accept-multiclient"
          - "--headless=true"
          - "--log"
          - "--api-version=2"
          - "exec"
          - "/actors"
          - "--"
          {{- end }}
          # Store configuration
          - "--store-name"
          - "{{ .Values.store.name }}"
          {{- range .Values.store.options }}
          - "--store-opt"
          - "{{ . }}"
          {{- end }}
          {{- if .Values.store.optionsFile.secretName }}
          - "--store-opts-file"
          - "/var/run/secrets/dapr.io/actors/options"
          {{- end }}
          # Placement options
{{- with .Values.placement.hostHealthCheckInterval }}
          - "--host-healthcheck-interval"
          - "{{ . }}"
{{- end }}
          # Reminders options
{{- with .Values.reminders }}
  {{- if eq .enabled false }}
          - "--no-reminders"
  {{- else }}
    {{- with .pollInterval }}
          - "--reminders-poll-interval"
          - "{{ . }}"
    {{- end }}
    {{- with .fetchAheadInterval}}
          - "--reminders-fetch-ahead-interval"
          - "{{ . }}"
    {{- end }}
    {{- with .fetchAheadBatchSize }}
          - "--reminders-fetch-ahead-batch-size"
          - "{{ . }}"
    {{- end -}}
    {{- with .leaseDuration }}
          - "--reminders-lease-duration"
          - "{{ . }}"
    {{- end -}}
  {{- end -}}
{{- end -}}
          # Other options
          - "--log-level"
          - "{{ .Values.logLevel }}"
          - "--mode"
          - "kubernetes"
          - "--enable-mtls"
          - "--trust-anchors-file"
          - "/var/run/secrets/dapr.io/tls/ca.crt"
          {{- if eq .Values.global.logAsJson true }}
          - "--log-as-json"
          {{- end }}
          {{- if eq .Values.global.prometheus.enabled true }}
          - "--enable-metrics"
          - "--metrics-port"
          - "{{ .Values.global.prometheus.port }}"
          {{- else }}
          - "--enable-metrics=false"
          {{- end }}
      automountServiceAccountToken: false
      volumes:
        - name: dapr-trust-bundle
          configMap:
            name: dapr-trust-bundle
        {{- if .Values.global.mtls.mountSentryVolume }}
        - name: dapr-identity-token
          projected:
            sources:
              - serviceAccountToken:
                  path: token
                  expirationSeconds: 600
                  audience: "spiffe://{{ .Values.global.mtls.controlPlaneTrustDomain }}/ns/{{ .Release.Namespace }}/dapr-sentry"
        {{- end }}
        {{- if .Values.store.optionsFile.secretName }}
        - name: actors-opts
          secret:
            secretName: "{{ .Values.store.optionsFile.secretName }}"
            items:
              - key: "{{ .Values.store.optionsFile.secretKey }}"
                path: options
        {{- end }}
      {{- with .Values.global.extraVolumes.actors }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                    - {{ .Values.global.daprControlPlaneOs }}
              {{- if .Values.global.daprControlPlaneArch }}
                - key: kubernetes.io/arch
                  operator: In
                  values:
                   - {{ .Values.global.daprControlPlaneArch }}
              {{- end }}
        {{- if .Values.global.ha.enabled }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - dapr-actors
                topologyKey: topology.kubernetes.io/zone
        {{- end }}
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- include "dapr.imagePullSecrets" (dict "imagePullSecrets" .Values.global.imagePullSecrets) | nindent 8 }}
      {{- end }}
      {{- if .Values.global.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.global.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.global.tolerations }}
      tolerations:
        {{- toYaml .Values.global.tolerations | indent 8 }}
      {{- end }}
{{- end }}
