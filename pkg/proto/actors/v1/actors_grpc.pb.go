// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: dapr/proto/actors/v1/actors.proto

package actors

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActorsClient is the client API for Actors service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActorsClient interface {
	// ServiceInfo returns information on the actors service, including the version.
	ServiceInfo(ctx context.Context, in *ServiceInfoRequest, opts ...grpc.CallOption) (*ServiceInfoResponse, error)
	// ConnectHost is used by the Dapr sidecar to register itself as an actor host.
	// It remains active as a long-lived bi-di stream to allow for the Actors service
	// to communicate with the sidecar, including for health-checks.
	ConnectHost(ctx context.Context, opts ...grpc.CallOption) (Actors_ConnectHostClient, error)
	// ReminderCompleted is used by the sidecar to acknowledge that a reminder has been executed successfully.
	ReminderCompleted(ctx context.Context, in *ReminderCompletedRequest, opts ...grpc.CallOption) (*ReminderCompletedResponse, error)
	// LookupActor returns the address of an actor.
	// If the actor is not active yet, it returns the address of an actor host capable of hosting it.
	LookupActor(ctx context.Context, in *LookupActorRequest, opts ...grpc.CallOption) (*LookupActorResponse, error)
	// ReportActorDeactivation is sent to report an actor that has been deactivated.
	ReportActorDeactivation(ctx context.Context, in *ReportActorDeactivationRequest, opts ...grpc.CallOption) (*ReportActorDeactivationResponse, error)
	// CreateReminder creates a new reminder.
	// If a reminder with the same ID (actor type, actor ID, name) already exists, it's replaced.
	CreateReminder(ctx context.Context, in *CreateReminderRequest, opts ...grpc.CallOption) (*CreateReminderResponse, error)
	// GetReminder returns details about an existing reminder.
	GetReminder(ctx context.Context, in *GetReminderRequest, opts ...grpc.CallOption) (*GetReminderResponse, error)
	// DeleteReminder removes an existing reminder before it fires.
	DeleteReminder(ctx context.Context, in *DeleteReminderRequest, opts ...grpc.CallOption) (*DeleteReminderResponse, error)
}

type actorsClient struct {
	cc grpc.ClientConnInterface
}

func NewActorsClient(cc grpc.ClientConnInterface) ActorsClient {
	return &actorsClient{cc}
}

func (c *actorsClient) ServiceInfo(ctx context.Context, in *ServiceInfoRequest, opts ...grpc.CallOption) (*ServiceInfoResponse, error) {
	out := new(ServiceInfoResponse)
	err := c.cc.Invoke(ctx, "/dapr.proto.actors.v1.Actors/ServiceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorsClient) ConnectHost(ctx context.Context, opts ...grpc.CallOption) (Actors_ConnectHostClient, error) {
	stream, err := c.cc.NewStream(ctx, &Actors_ServiceDesc.Streams[0], "/dapr.proto.actors.v1.Actors/ConnectHost", opts...)
	if err != nil {
		return nil, err
	}
	x := &actorsConnectHostClient{stream}
	return x, nil
}

type Actors_ConnectHostClient interface {
	Send(*ConnectHostClientStream) error
	Recv() (*ConnectHostServerStream, error)
	grpc.ClientStream
}

type actorsConnectHostClient struct {
	grpc.ClientStream
}

func (x *actorsConnectHostClient) Send(m *ConnectHostClientStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *actorsConnectHostClient) Recv() (*ConnectHostServerStream, error) {
	m := new(ConnectHostServerStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actorsClient) ReminderCompleted(ctx context.Context, in *ReminderCompletedRequest, opts ...grpc.CallOption) (*ReminderCompletedResponse, error) {
	out := new(ReminderCompletedResponse)
	err := c.cc.Invoke(ctx, "/dapr.proto.actors.v1.Actors/ReminderCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorsClient) LookupActor(ctx context.Context, in *LookupActorRequest, opts ...grpc.CallOption) (*LookupActorResponse, error) {
	out := new(LookupActorResponse)
	err := c.cc.Invoke(ctx, "/dapr.proto.actors.v1.Actors/LookupActor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorsClient) ReportActorDeactivation(ctx context.Context, in *ReportActorDeactivationRequest, opts ...grpc.CallOption) (*ReportActorDeactivationResponse, error) {
	out := new(ReportActorDeactivationResponse)
	err := c.cc.Invoke(ctx, "/dapr.proto.actors.v1.Actors/ReportActorDeactivation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorsClient) CreateReminder(ctx context.Context, in *CreateReminderRequest, opts ...grpc.CallOption) (*CreateReminderResponse, error) {
	out := new(CreateReminderResponse)
	err := c.cc.Invoke(ctx, "/dapr.proto.actors.v1.Actors/CreateReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorsClient) GetReminder(ctx context.Context, in *GetReminderRequest, opts ...grpc.CallOption) (*GetReminderResponse, error) {
	out := new(GetReminderResponse)
	err := c.cc.Invoke(ctx, "/dapr.proto.actors.v1.Actors/GetReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorsClient) DeleteReminder(ctx context.Context, in *DeleteReminderRequest, opts ...grpc.CallOption) (*DeleteReminderResponse, error) {
	out := new(DeleteReminderResponse)
	err := c.cc.Invoke(ctx, "/dapr.proto.actors.v1.Actors/DeleteReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActorsServer is the server API for Actors service.
// All implementations should embed UnimplementedActorsServer
// for forward compatibility
type ActorsServer interface {
	// ServiceInfo returns information on the actors service, including the version.
	ServiceInfo(context.Context, *ServiceInfoRequest) (*ServiceInfoResponse, error)
	// ConnectHost is used by the Dapr sidecar to register itself as an actor host.
	// It remains active as a long-lived bi-di stream to allow for the Actors service
	// to communicate with the sidecar, including for health-checks.
	ConnectHost(Actors_ConnectHostServer) error
	// ReminderCompleted is used by the sidecar to acknowledge that a reminder has been executed successfully.
	ReminderCompleted(context.Context, *ReminderCompletedRequest) (*ReminderCompletedResponse, error)
	// LookupActor returns the address of an actor.
	// If the actor is not active yet, it returns the address of an actor host capable of hosting it.
	LookupActor(context.Context, *LookupActorRequest) (*LookupActorResponse, error)
	// ReportActorDeactivation is sent to report an actor that has been deactivated.
	ReportActorDeactivation(context.Context, *ReportActorDeactivationRequest) (*ReportActorDeactivationResponse, error)
	// CreateReminder creates a new reminder.
	// If a reminder with the same ID (actor type, actor ID, name) already exists, it's replaced.
	CreateReminder(context.Context, *CreateReminderRequest) (*CreateReminderResponse, error)
	// GetReminder returns details about an existing reminder.
	GetReminder(context.Context, *GetReminderRequest) (*GetReminderResponse, error)
	// DeleteReminder removes an existing reminder before it fires.
	DeleteReminder(context.Context, *DeleteReminderRequest) (*DeleteReminderResponse, error)
}

// UnimplementedActorsServer should be embedded to have forward compatible implementations.
type UnimplementedActorsServer struct {
}

func (UnimplementedActorsServer) ServiceInfo(context.Context, *ServiceInfoRequest) (*ServiceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceInfo not implemented")
}
func (UnimplementedActorsServer) ConnectHost(Actors_ConnectHostServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectHost not implemented")
}
func (UnimplementedActorsServer) ReminderCompleted(context.Context, *ReminderCompletedRequest) (*ReminderCompletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReminderCompleted not implemented")
}
func (UnimplementedActorsServer) LookupActor(context.Context, *LookupActorRequest) (*LookupActorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupActor not implemented")
}
func (UnimplementedActorsServer) ReportActorDeactivation(context.Context, *ReportActorDeactivationRequest) (*ReportActorDeactivationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportActorDeactivation not implemented")
}
func (UnimplementedActorsServer) CreateReminder(context.Context, *CreateReminderRequest) (*CreateReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReminder not implemented")
}
func (UnimplementedActorsServer) GetReminder(context.Context, *GetReminderRequest) (*GetReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReminder not implemented")
}
func (UnimplementedActorsServer) DeleteReminder(context.Context, *DeleteReminderRequest) (*DeleteReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReminder not implemented")
}

// UnsafeActorsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActorsServer will
// result in compilation errors.
type UnsafeActorsServer interface {
	mustEmbedUnimplementedActorsServer()
}

func RegisterActorsServer(s grpc.ServiceRegistrar, srv ActorsServer) {
	s.RegisterService(&Actors_ServiceDesc, srv)
}

func _Actors_ServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorsServer).ServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dapr.proto.actors.v1.Actors/ServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorsServer).ServiceInfo(ctx, req.(*ServiceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actors_ConnectHost_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ActorsServer).ConnectHost(&actorsConnectHostServer{stream})
}

type Actors_ConnectHostServer interface {
	Send(*ConnectHostServerStream) error
	Recv() (*ConnectHostClientStream, error)
	grpc.ServerStream
}

type actorsConnectHostServer struct {
	grpc.ServerStream
}

func (x *actorsConnectHostServer) Send(m *ConnectHostServerStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *actorsConnectHostServer) Recv() (*ConnectHostClientStream, error) {
	m := new(ConnectHostClientStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Actors_ReminderCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReminderCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorsServer).ReminderCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dapr.proto.actors.v1.Actors/ReminderCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorsServer).ReminderCompleted(ctx, req.(*ReminderCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actors_LookupActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupActorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorsServer).LookupActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dapr.proto.actors.v1.Actors/LookupActor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorsServer).LookupActor(ctx, req.(*LookupActorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actors_ReportActorDeactivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportActorDeactivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorsServer).ReportActorDeactivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dapr.proto.actors.v1.Actors/ReportActorDeactivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorsServer).ReportActorDeactivation(ctx, req.(*ReportActorDeactivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actors_CreateReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorsServer).CreateReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dapr.proto.actors.v1.Actors/CreateReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorsServer).CreateReminder(ctx, req.(*CreateReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actors_GetReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorsServer).GetReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dapr.proto.actors.v1.Actors/GetReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorsServer).GetReminder(ctx, req.(*GetReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actors_DeleteReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorsServer).DeleteReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dapr.proto.actors.v1.Actors/DeleteReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorsServer).DeleteReminder(ctx, req.(*DeleteReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Actors_ServiceDesc is the grpc.ServiceDesc for Actors service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Actors_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dapr.proto.actors.v1.Actors",
	HandlerType: (*ActorsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceInfo",
			Handler:    _Actors_ServiceInfo_Handler,
		},
		{
			MethodName: "ReminderCompleted",
			Handler:    _Actors_ReminderCompleted_Handler,
		},
		{
			MethodName: "LookupActor",
			Handler:    _Actors_LookupActor_Handler,
		},
		{
			MethodName: "ReportActorDeactivation",
			Handler:    _Actors_ReportActorDeactivation_Handler,
		},
		{
			MethodName: "CreateReminder",
			Handler:    _Actors_CreateReminder_Handler,
		},
		{
			MethodName: "GetReminder",
			Handler:    _Actors_GetReminder_Handler,
		},
		{
			MethodName: "DeleteReminder",
			Handler:    _Actors_DeleteReminder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectHost",
			Handler:       _Actors_ConnectHost_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dapr/proto/actors/v1/actors.proto",
}
